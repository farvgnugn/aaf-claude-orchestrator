export type RepoCoords = { owner: string; repo: string }
const BASE = 'https://api.github.com'
function bearer() { const t = process.env.GITHUB_TOKEN; if (!t) throw new Error('GITHUB_TOKEN not set'); return { Authorization: `Bearer ${t}`, 'User-Agent': 'orchestrator-mvp' } }
export function parseRepoUrl(url: string): RepoCoords { const m = url.match(/github\.com\/([^\/]+)\/([^\/#]+)/); if (m) return { owner: m[1], repo: m[2] }; const parts = url.split('/'); if (parts.length===2) return { owner: parts[0], repo: parts[1] }; throw new Error('Unsupported repo url:'+url) }
export async function getDefaultBranch(owner: string, repo: string) { const r = await fetch(`${BASE}/repos/${owner}/${repo}`, { headers: bearer() }); const j = await r.json(); return j.default_branch || 'main' }
export async function getBranchSha(owner: string, repo: string, branch: string) { const r = await fetch(`${BASE}/repos/${owner}/${repo}/git/ref/heads/${branch}`, { headers: bearer() }); if (r.status>=400) throw new Error('getBranchSha failed'); const j = await r.json(); return j.object.sha }
export async function createBranch(owner: string, repo: string, newBranch: string, fromSha: string) { const r = await fetch(`${BASE}/repos/${owner}/${repo}/git/refs`, { method:'POST', headers:{...bearer(),'Content-Type':'application/json'}, body: JSON.stringify({ ref:`refs/heads/${newBranch}`, sha: fromSha }) }); if (r.status>=300) throw new Error(await r.text()) }
export async function putFile(owner: string, repo: string, branch: string, path: string, content: string, message: string) { const b64 = Buffer.from(content,'utf8').toString('base64'); const r = await fetch(`${BASE}/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`, { method:'PUT', headers:{...bearer(),'Content-Type':'application/json'}, body: JSON.stringify({ message, content: b64, branch }) }); if (r.status>=300) throw new Error(await r.text()); return await r.json() }
export async function createPR(owner: string, repo: string, head: string, base: string, title: string, body: string) { const r = await fetch(`${BASE}/repos/${owner}/${repo}/pulls`, { method:'POST', headers:{...bearer(),'Content-Type':'application/json'}, body: JSON.stringify({ title, head, base, body }) }); const j = await r.json(); if (r.status>=300) throw new Error(JSON.stringify(j)); return j }
export async function reviewAndMergePR(owner: string, repo: string, prNumber: number, approve: boolean = true) {
  await fetch(`${BASE}/repos/${owner}/${repo}/pulls/${prNumber}/reviews`, { method:'POST', headers:{...bearer(),'Content-Type':'application/json'}, body: JSON.stringify({ event: approve ? 'APPROVE' : 'REQUEST_CHANGES', body: approve ? 'LGTM (auto)' : 'Needs changes' }) })
  await fetch(`${BASE}/repos/${owner}/${repo}/pulls/${prNumber}/merge`, { method:'PUT', headers:{...bearer(),'Content-Type':'application/json'}, body: JSON.stringify({ merge_method: 'squash' }) })
}
